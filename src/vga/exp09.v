
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module exp09(

	//////////// CLOCK //////////
	input 		          		CLOCK_50,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// Seg7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,

	//////////// VGA //////////
	output		          		VGA_BLANK_N,
	output		     [7:0]		VGA_B,
	output		          		VGA_CLK,
	output		     [7:0]		VGA_G,
	output		          		VGA_HS,
	output		     [7:0]		VGA_R,
	output		          		VGA_SYNC_N,
	output		          		VGA_VS,

	//////////// PS2 //////////
	inout 		          		PS2_CLK,
	inout 		          		PS2_DAT
);



//=======================================================
//  REG/WIRE declarations
//=======================================================

wire [7:0] key_code, ascii;
wire clk_as, ctrl, shift, caps, alt, en, is_dir;

wire [11:0] vga_data;
wire [9:0] h_addr, v_addr;
wire [3:0] vga_r, vga_g, vga_b;

//=======================================================
//  Structural coding
//=======================================================

assign VGA_R = {vga_r, 4'b0};
assign VGA_G = {vga_g, 4'b0};
assign VGA_B = {vga_b, 4'b0};
assign VGA_SYNC_N = 0;

vga_ctrl vga_inst(
	.pclk(VGA_CLK),
	.reset(1'b0),
	.vga_data(vga_data),
	.h_addr(h_addr),
	.v_addr(v_addr),
	.hsync(VGA_HS),
	.vsync(VGA_VS),
	.valid(VGA_BLANK_N),
	.vga_r(vga_r),
	.vga_g(vga_g),
	.vga_b(vga_b)
);

clkgen #(25000000) clk_inst(
	.clkin(CLOCK_50),
	.rst(1'b0),
	.clken(1'b1),
	.clkout(VGA_CLK)
);

putchar my_ch(
	.clk(VGA_CLK),
	.w_ascii(ascii),
	.ctrl(ctrl),
	.shift(shift),
	.alt(alt),
	.h_addr(h_addr),
	.v_addr(v_addr),
	.data(vga_data),
	.en(en),
	.is_dir(is_dir)
);

clk_slow as_clk(
	.clk(CLOCK_50),
	.out(clk_as)
);

ascii_cnt my_cnt(
	.clk(clk_as),
	.en(en),
	.ascii(ascii)
);

keyboard kbd_proc(
	.clk(CLOCK_50),
	.clrn(KEY[0]),
	.ps2_clk(PS2_CLK),
	.ps2_data(PS2_DAT),
	.cur_key(key_code),
	.ascii_key(ascii),
	.ctrl(ctrl),
	.shift(shift),
	.caps(caps),
	.alt(alt),
	.is_dir(is_dir)
);

endmodule
